// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations

  post     Post[] // one to many 
  comments Comment[] // one to many
  likes    Like[] // one to many

  followers Follows[] @relation("following") //users following the user   
  following Follows[] @relation("followers") //users the user is following

  notifications        Notification[] @relation("userNotifications") //notifications for the user
  notificationsCreated Notification[] @relation("notificationCreator") //notifications created by the user
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade) //cascade means if the user is deleted, the post is also deleted
  comments      Comment[] //one to many
  likes         Like[] //one to many
  notifications Notification[] //one to many //todo
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postid    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postid], references: [id], onDelete: Cascade)
  notifications Notification[] //one to many //todo

  @@index([authorId, postid]) //composite index for faster querying
}

model Like {
  id        String   @id @default(cuid())
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  //relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[] //one to many // todo

  @@unique([authorId, postId]) //unique index to prevent duplicate likes
  @@index([authorId, postId]) //composite index for faster querying 
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  //relations

  follower  User @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId]) //composite primary key to prevent duplicate follows
  @@index([followerId, followingId]) //composite index for faster querying
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

model Notification {
  id        String           @id @default(cuid())
  userId    String //user to receive the notification
  creatorId String //user who created the notification
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())
  likeId    String?
  type      NotificationType
  read      Boolean          @default(false)

  //relations
  user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  like    Like?    @relation(fields: [likeId], references: [id], onDelete: Cascade)
}
